1. Convolutional Neural Networks
OK, we mentioned Convolutional networks briefly in the previous lesson and we have already used the convolutional layer in the last exercise â€“ but let's pop the hood and see how it all actually works underneath.

2. Convolution
What is a convolution, actually? It is a mathematical operation that describes how signals are transformed by passing through systems of different characteristics. The mathematical expression is rather complicated, but for your intuition it is most important to understand that it is a function that takes two inputs: the raw, input signal (usually video or audio) and the transfer function of the processing system (for example a camera lens, a phone, or a simple tube through which the sound travels). For example, in many pop songs you can hear parts that sound as if they were recorded over the telephone. That was certainly not the case, but the sound engineers used an effect that applied the telephone transfer function on the raw, high fidelity signal, producing the familiar result.

3. Convolution on images: Kernels
So, intuitively speaking, we use convolution to apply certain filters to our signal, in order to extract particular features from it. These "filters" are also called "kernels" and they can be as simple as a 3-by-3 matrix of zeros and ones. They effectively act as a kind of a lens through which the original image is passed, as illustrated below -- where I is the matrix of pixel values of the original image, K is the kernel and on the far right-hand side we see the resulting image pixel values.

4. Example: Vertical edge detection
To make it tangible, let's see a practical example. One of the common image transformations is edge detection and the standard kernel for that purpose is the so-called Sobel kernel, named by its author. By calculating the convolution using a black and white image and the Sobel kernel as inputs, shown on the left, we produce the picture on the right, with clearly visible vertical edges, because we used a kernel accentuating pixel intensity changes on the horizontal axis.

5. The beauty of it all
So, how do we find the right kernel for our image classification problem? For a long time, that was the product of the hard work of Computer Vision engineers, which would spent ages tweaking their preprocessing and feature extraction algorithms. But in the age of Deep Learning and Convolutional Neural Networks, that weight is now off our shoulders! That's the beauty of it and the power of Convolutional Neural Networks -- THEY learn the optimal kernels themselves, tweaking their values until they achieve the best possible performance on the data and criteria we have provided. And that is precisely the reason why Deep Learning has come to dominate the domain of computer vision: What was once a tedious task of feature engineering, reserved only for the top experts, can now be performed programmatically, provided enough labelled data is fed into the algorithm at training time.